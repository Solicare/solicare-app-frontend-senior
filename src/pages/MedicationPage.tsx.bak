import React, { useState } from 'const MedicationHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 40px;
  background-color: white;
  padding: 28px 35px;
  border-radius: 16px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
`;mport { useNavigate } from 'react-router-dom';
import { mockMedications } from '../data/mockData';
import styled from 'styled-components';
import {
  StatusBadge,
  NavButton,
} from '../components/StyledComponents';

interface MedicationItemProps {
  taken: boolean;
}

const MediumText = styled.h2`
  font-size: 24px;
  font-weight: bold;
  color: #333;
  margin: 15px 0;
`;

// Styled Components for Medication Page
const MedicationWrapper = styled.div`
  padding: 40px 30px;
  background-color: #f0f2f5;
  min-height: 100vh;
  font-family: 'Roboto', sans-serif;
  max-width: 1800px;
  margin: 0 auto;
  box-sizing: border-box;
  zoom: 0.9;
  transform-origin: top center;
`;

const MedicationHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 40px;
  background-color: white;
  padding: 24px 30px;
  border-radius: 12px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
`;

const PageTitle = styled.h2`
  font-size: 28px;
  color: #343a40;
  margin: 0;
  font-weight: 700;
`;

const ToggleHistoryButton = styled(NavButton)`
  margin-left: 15px;
`;

const MedicationSectionTitle = styled.h3`
  font-size: 24px;
  color: #343a40;
  margin-top: 40px;
  margin-bottom: 25px;
  font-weight: 600;
`;

const MedicationSummaryCard = styled.div`
  background: white;
  border-radius: 16px;
  padding: 40px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
  text-align: center;
  margin-bottom: 32px;
  
  ${SummaryText} {
    font-size: 20px;
    margin-bottom: 20px;
  }

  ${SummaryValue} {
    font-size: 56px;
  }
`;

const SummaryText = styled.p`
  font-size: 18px;
  color: #555;
  margin-bottom: 15px;
`;

const SummaryValue = styled.p`
  font-size: 48px;
  font-weight: bold;
  color: #007bff;
  margin: 0;
`;

const MedicationProgress = styled.div`
  width: 100%;
  height: 25px;
  background-color: #e9ecef;
  border-radius: 12px;
  overflow: hidden;
  margin-top: 20px;
`;

const MedicationProgressBar = styled.div<{ progress: number }>`
  height: 100%;
  width: ${props => props.progress}%;
  background-color: #28a745;
  border-radius: 12px;
  transition: width 0.5s ease-in-out;
`;

const MedicationItemCard = styled.div<MedicationItemProps>`
  background: white;
  border-radius: 12px;
  padding: 20px;
  margin-bottom: 15px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  display: flex;
  align-items: center;
  justify-content: space-between;
  border-left: 6px solid ${props => (props.taken ? '#28a745' : '#dc3545')};
  transition: transform 0.2s ease-in-out, border-color 0.3s ease;

  &:hover {
    transform: translateY(-3px);
  }
`;

const MedicationDetails = styled.div`
  flex: 1;
  text-align: left;
`;

const MedicationName = styled.h4`
  font-size: 20px;
  color: #343a40;
  margin: 0 0 8px 0;
  font-weight: 600;
`;

const MedicationTimeDosage = styled.p`
  font-size: 15px;
  color: #6c757d;
  margin: 0 0 5px 0;
`;

const MedicationNote = styled.p`
  font-size: 14px;
  color: #888;
  margin: 0;
`;

const ActionButton = styled.button<{ variant?: 'primary' | 'secondary' }>`
  padding: 10px 20px;
  border: none;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.2s ease;
  margin-left: 20px;

  background-color: ${props => (props.variant === 'primary' ? '#007bff' : '#6c757d')};
  color: white;

  &:hover {
    transform: translateY(-2px);
    background-color: ${props => (props.variant === 'primary' ? '#0056b3' : '#5a6268')};
  }

  &:active {
    transform: translateY(0);
  }
`;

const HistoryCard = styled.div`
  background: white;
  border-radius: 12px;
  padding: 30px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
  margin-bottom: 30px;
`;

const HistoryItem = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px 0;
  border-bottom: 1px solid #eee;

  &:last-child {
    border-bottom: none;
  }
`;

const HistoryDay = styled.p`
  font-size: 18px;
  font-weight: bold;
  color: #343a40;
  margin: 0;
  width: 80px;
`;

const HistoryMedList = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  flex: 1;
  justify-content: flex-end;
`;

const HistoryStatusBadge = styled(StatusBadge)<{ status: 'taken' | 'not-taken' }>`
  padding: 6px 12px;
  font-size: 14px;
  border-radius: 16px;
`;

const StatisticsCard = styled(HistoryCard)`
  margin-top: 30px;
`;

const StatisticItem = styled.div`
  display: flex;
  justify-content: space-between;
  margin-bottom: 10px;

  &:last-child {
    margin-bottom: 0;
  }
`;

const StatisticLabel = styled.p`
  font-size: 16px;
  color: #555;
  margin: 0;
`;

const StatisticValue = styled.p`
  font-size: 16px;
  font-weight: bold;
  color: #343a40;
  margin: 0;
`;

const MedicationPage: React.FC = () => {
  const navigate = useNavigate();
  const [medications, setMedications] = useState(mockMedications);
  const [showHistory, setShowHistory] = useState(false);

  const toggleMedication = (id: number) => {
    setMedications(medications.map(med => 
      med.id === id ? { ...med, taken: !med.taken } : med
    ));
  };

  const takenCount = medications.filter(med => med.taken).length;
  const totalCount = medications.length;

  const getTimeStatus = (time: string) => {
    const now = new Date();
    const [hours, minutes] = time.split(':').map(Number);
    const medTime = new Date();
    medTime.setHours(hours, minutes, 0, 0);
    
    const diff = now.getTime() - medTime.getTime();
    const diffHours = diff / (1000 * 60 * 60);
    
    if (diffHours < 0) return 'upcoming';
    if (diffHours < 1) return 'current';
    return 'overdue';
  };

  return (
    <MedicationWrapper>
      <MedicationHeader>
        <PageTitle>üíä ÏïΩÎ¨º Î≥µÏö© Í¥ÄÎ¶¨</PageTitle>
        <div>
          <ToggleHistoryButton onClick={() => setShowHistory(!showHistory)}>
            {showHistory ? 'Ïò§Îäò ÏïΩ' : 'Í∏∞Î°ù Î≥¥Í∏∞'}
          </ToggleHistoryButton>
          <NavButton onClick={() => navigate('/')}>ÌôàÏúºÎ°ú</NavButton>
        </div>
      </MedicationHeader>

      {!showHistory ? (
        <>
          <MedicationSectionTitle>Ïò§ÎäòÏùò ÏïΩ Î≥µÏö©</MedicationSectionTitle>

          {/* Î≥µÏö© ÌòÑÌô© ÏöîÏïΩ */}
          <MedicationSummaryCard>
            <SummaryText>Î≥µÏö© ÏôÑÎ£å</SummaryText>
            <SummaryValue>
              {takenCount} / {totalCount}
            </SummaryValue>
            <MedicationProgress>
              <MedicationProgressBar progress={(takenCount / totalCount) * 100} />
            </MedicationProgress>
          </MedicationSummaryCard>

          {/* ÏïΩÎ¨º Î™©Î°ù */}
          <div style={{ 
            display: 'grid', 
            gridTemplateColumns: 'repeat(3, 1fr)', 
            gap: '32px',
            marginTop: '32px'
          }}>
            {medications.map(medication => {
              const timeStatus = getTimeStatus(medication.time);
              return (
                <div key={medication.id} style={{
                  background: 'white',
                  borderRadius: '16px',
                  padding: '35px',
                  boxShadow: '0 4px 15px rgba(0, 0, 0, 0.08)',
                  display: 'flex',
                  flexDirection: 'column',
                  minHeight: '220px',
                }}>
                  <div style={{ marginBottom: '24px' }}>
                    <h3 style={{ fontSize: '24px', margin: '0 0 12px 0', color: '#343a40', fontWeight: 600 }}>{medication.name}</h3>
                    <p style={{ fontSize: '18px', color: '#6c757d', margin: '0 0 8px 0' }}>‚è∞ {medication.time} ‚Ä¢ {medication.dosage}</p>
                    <p style={{ fontSize: '16px', color: '#888', margin: 0 }}>{medication.note}</p>
                  </div>
                  <div style={{ 
                    marginTop: 'auto',
                    display: 'flex',
                    flexDirection: 'column',
                    gap: '16px'
                  }}>
                    <div style={{ display: 'flex', gap: '10px' }}>
                      <StatusBadge status={medication.taken ? 'taken' : 'not-taken'}>
                        {medication.taken ? 'Î≥µÏö©ÏôÑÎ£å' : 'ÎØ∏Î≥µÏö©'}
                      </StatusBadge>
                      {timeStatus === 'overdue' && !medication.taken && (
                        <StatusBadge status="not-taken">
                          ÏãúÍ∞Ñ ÏßÄÎÇ®
                        </StatusBadge>
                      )}
                    </div>
                    <button
                      className={medication.taken ? 'secondary-btn' : 'primary-btn'}
                      style={{ 
                        padding: '16px 24px', 
                        borderRadius: '12px', 
                        border: 'none', 
                        background: medication.taken ? '#6c757d' : '#007bff', 
                        color: '#fff', 
                        fontSize: '18px',
                        fontWeight: 600, 
                        cursor: 'pointer',
                        transition: 'all 0.2s ease-in-out'
                      }}
                      onClick={() => toggleMedication(medication.id)}
                    >
                      {medication.taken ? 'Î≥µÏö© Ï∑®ÏÜå' : 'Î≥µÏö©ÌïòÍ∏∞'}
                    </button>
                  </div>
                </div>
              );
            })}
          </div>
        </>
      ) : (
        <>
          <MedicationSectionTitle>Î≥µÏö© Í∏∞Î°ù</MedicationSectionTitle>

          <HistoryCard>
            <MediumText>ÏßÄÎÇú 7ÏùºÍ∞ÑÏùò Î≥µÏö© Í∏∞Î°ù</MediumText>
            {['Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†', 'Ïùº'].map((day, index) => (
              <HistoryItem key={day}>
                <HistoryDay>{day}ÏöîÏùº</HistoryDay>
                <HistoryMedList>
                  <HistoryStatusBadge status="taken">ÌòàÏïïÏïΩ ‚úì</HistoryStatusBadge>
                  <HistoryStatusBadge status="taken">ÎãπÎá®ÏïΩ ‚úì</HistoryStatusBadge>
                  <HistoryStatusBadge status={index > 3 ? 'taken' : 'not-taken'}>
                    ÎπÑÌÉÄÎØº {index > 3 ? '‚úì' : '‚úó'}
                  </HistoryStatusBadge>
                </HistoryMedList>
              </HistoryItem>
            ))}
          </HistoryCard>

          <StatisticsCard>
            <MediumText>Î≥µÏö©Î•† ÌÜµÍ≥Ñ</MediumText>
            <StatisticItem>
              <StatisticLabel>ÌòàÏïïÏïΩ</StatisticLabel>
              <StatisticValue>100% (7/7Ïùº)</StatisticValue>
            </StatisticItem>
            <StatisticItem>
              <StatisticLabel>ÎãπÎá®ÏïΩ</StatisticLabel>
              <StatisticValue>100% (7/7Ïùº)</StatisticValue>
            </StatisticItem>
            <StatisticItem>
              <StatisticLabel>ÎπÑÌÉÄÎØº</StatisticLabel>
              <StatisticValue>43% (3/7Ïùº)</StatisticValue>
            </StatisticItem>
          </StatisticsCard>
        </>
      )}
    </MedicationWrapper>
  );
};

export default MedicationPage;

